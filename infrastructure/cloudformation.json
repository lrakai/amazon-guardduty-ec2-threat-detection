{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Detecting EC2 Threats with Amazon GuardDuty",
    "Parameters": {
        "Region": {
            "Type": "String",
            "Default": "us-west-2"
        }
    },
    "Mappings": {
        "SubnetConfig": {
            "TestVPC": {
                "CIDR": "10.0.0.0/20"
            },
            "TestSubnet": {
                "CIDR": "10.0.0.0/24",
                "AZ": "us-west-2a"
            },
            "MaliciousVPC": {
                "CIDR": "192.168.0.0/20"
            },
            "MaliciousSubnet": {
                "CIDR": "192.168.0.0/24",
                "AZ": "us-west-2a"
            }
        },
        "InstanceConfig": {
            "TestInstance": {
                "Ip": "10.0.0.100"
            },
            "MaliciousInstance": {
                "Ip": "192.168.0.100"
            }
        },
        "UserConfig": {
            "Login": {
                "Name": "student",
                "Pass": "password"
            }
        }
    },
    "Resources": {
        "TestInstance": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "IamInstanceProfile": {
                    "Ref": "TestInstanceProfile"
                },
                "ImageId": "ami-07eb707f",
                "InstanceType": "t2.micro",
                "KeyName": {
                    "Ref": "AWS::AccountId"
                },
                "PrivateIpAddress": {
                    "Fn::FindInMap": [
                        "InstanceConfig",
                        "TestInstance",
                        "Ip"
                    ]
                },
                "SecurityGroupIds": [
                    {
                        "Fn::GetAtt": [
                            "TestSecurityGroup",
                            "GroupId"
                        ]
                    }
                ],
                "SubnetId": {
                    "Ref": "TestSubnet"
                },
                "Tags": [
                    {
                        "Key": "Type",
                        "Value": "App Server"
                    },
                    {
                        "Key": "Name",
                        "Value": "App Server"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "yum install -y haproxy-1.5.18-6.amzn2.x86_64\n",
                                "cat <<EOF > /etc/haproxy/haproxy.cfg\n",
                                "global\n",
                                "    log         127.0.0.1 local2\n",
                                "    chroot      /var/lib/haproxy\n",
                                "    pidfile     /var/run/haproxy.pid\n",
                                "    maxconn     4000\n",
                                "    user        haproxy\n",
                                "    group       haproxy\n",
                                "    daemon\n",
                                "    stats socket /var/lib/haproxy/stats\n",
                                "defaults\n",
                                "    mode                    http\n",
                                "    log                     global\n",
                                "    option                  httplog\n",
                                "    option                  dontlognull\n",
                                "    option http-server-close\n",
                                "    option forwardfor       except 127.0.0.0/8\n",
                                "    option                  redispatch\n",
                                "    retries                 3\n",
                                "    timeout http-request    10s\n",
                                "    timeout queue           1m\n",
                                "    timeout connect         10s\n",
                                "    timeout client          1m\n",
                                "    timeout server          1m\n",
                                "    timeout http-keep-alive 10s\n",
                                "    timeout check           10s\n",
                                "    maxconn                 3000\n",
                                "frontend http-in\n",
                                "    bind *:80\n",
                                "    default_backend app\n",
                                "backend app\n",
                                "    balance     roundrobin\n",
                                "    server  app1 10.0.2.100:8080 check\n",
                                "EOF\n",
                                "systemctl enable haproxy\n",
                                "systemctl start haproxy\n",
                                "yum install -y ruby-2.0.0.648-33.amzn2.0.1.x86_64\n",
                                "gem install serverspec -v 2.41.3\n",
                                "useradd -G adm,wheel serverspec\n",
                                "echo 'serverspec:1Cloud_Academy_Labs!' | chpasswd\n",
                                "sed -i 's/\\(PasswordAuthentication \\).*/\\1yes/g' /etc/ssh/sshd_config\n",
                                "systemctl restart sshd\n"
                            ]
                        ]
                    }
                }
            }
        },
        "TestEc2InstanceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "test-instance-policy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Action": [
                                        "ec2:Describe*"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ],
                "RoleName": "test-instance-role"
            }
        },
        "TestInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "TestEc2InstanceRole"
                    }
                ]
            }
        },
        "MaliciousInstance": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "IamInstanceProfile": {
                    "Ref": "MaliciousInstanceProfile"
                },
                "ImageId": "ami-07eb707f",
                "InstanceType": "t2.micro",
                "KeyName": {
                    "Ref": "AWS::AccountId"
                },
                "PrivateIpAddress": {
                    "Fn::FindInMap": [
                        "InstanceConfig",
                        "MaliciousInstance",
                        "Ip"
                    ]
                },
                "SecurityGroupIds": [
                    {
                        "Fn::GetAtt": [
                            "MaliciousSecurityGroup",
                            "GroupId"
                        ]
                    }
                ],
                "SubnetId": {
                    "Ref": "MaliciousSubnet"
                },
                "Tags": [
                    {
                        "Key": "Type",
                        "Value": "Malicious Instance"
                    },
                    {
                        "Key": "Name",
                        "Value": "Malicious Instance"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "yum install -y docker-17.06.2ce-1.102.amzn2.x86_64\n",
                                "systemctl enable docker\n",
                                "systemctl start docker\n",
                                "docker run -p 8080:80 -d --restart always --name tetris lrakai/tetris\n",
                                "yum install -y ruby-2.0.0.648-33.amzn2.0.1.x86_64\n",
                                "gem install serverspec -v 2.41.3\n",
                                "useradd -G adm,wheel,docker serverspec\n",
                                "echo 'serverspec:1Cloud_Academy_Labs!' | chpasswd\n",
                                "sed -i 's/\\(PasswordAuthentication \\).*/\\1yes/g' /etc/ssh/sshd_config\n",
                                "systemctl restart sshd\n"
                            ]
                        ]
                    }
                }
            }
        },
        "MaliciousEc2InstanceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "malicious-instance-policy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Action": [
                                        "iam:*"
                                    ],
                                    "Effect": "Deny",
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ],
                "RoleName": "malicious-instance-role"
            }
        },
        "MaliciousInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "MaliciousEc2InstanceRole"
                    }
                ]
            }
        },
        "TestVpc": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "TestVPC",
                        "CIDR"
                    ]
                },
                "EnableDnsSupport": true,
                "EnableDnsHostnames": true,
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Test Vpc"
                    },
                    {
                        "Key": "Environment",
                        "Value": "Test"
                    }
                ]
            }
        },
        "TestSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "TestVpc"
                },
                "MapPublicIpOnLaunch": true,
                "AvailabilityZone": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "TestSubnet",
                        "AZ"
                    ]
                },
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "TestSubnet",
                        "CIDR"
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Test Subnet"
                    },
                    {
                        "Key": "Environment",
                        "Value": "Test"
                    }
                ]
            }
        },
        "TestInternetGatewayAttach": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "TestVpc"
                },
                "InternetGatewayId": {
                    "Ref": "TestInternetGateway"
                }
            }
        },
        "TestPublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "TestVpc"
                }
            }
        },
        "TestPublicRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "TestPublicRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "TestInternetGateway"
                }
            }
        },
        "TestSubnetRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "TestSubnet"
                },
                "RouteTableId": {
                    "Ref": "TestPublicRouteTable"
                }
            }
        },
        "TestInternetGateway": {
            "Type": "AWS::EC2::InternetGateway"
        },
        "MaliciousVpc": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "MaliciousVPC",
                        "CIDR"
                    ]
                },
                "EnableDnsSupport": true,
                "EnableDnsHostnames": true,
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Malicious Vpc"
                    },
                    {
                        "Key": "Environment",
                        "Value": "Malicious"
                    }
                ]
            }
        },
        "MaliciousSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "MaliciousVpc"
                },
                "MapPublicIpOnLaunch": true,
                "AvailabilityZone": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "MaliciousSubnet",
                        "AZ"
                    ]
                },
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "MaliciousSubnet",
                        "CIDR"
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Malicious Subnet"
                    },
                    {
                        "Key": "Environment",
                        "Value": "Malicious"
                    }
                ]
            }
        },
        "MaliciousInternetGatewayAttach": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "MaliciousVpc"
                },
                "InternetGatewayId": {
                    "Ref": "MaliciousInternetGateway"
                }
            }
        },
        "MaliciousPublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "MaliciousVpc"
                }
            }
        },
        "MaliciousPublicRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "MaliciousPublicRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "MaliciousInternetGateway"
                }
            }
        },
        "MaliciousSubnetRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "MaliciousSubnet"
                },
                "RouteTableId": {
                    "Ref": "MaliciousPublicRouteTable"
                }
            }
        },
        "MaliciousInternetGateway": {
            "Type": "AWS::EC2::InternetGateway"
        },
        "MaliciousSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "MaliciousVpc"
                },
                "MapPublicIpOnLaunch": true,
                "AvailabilityZone": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "MaliciousSubnet",
                        "AZ"
                    ]
                },
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "MaliciousSubnet",
                        "CIDR"
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Malicious Subnet"
                    },
                    {
                        "Key": "Environment",
                        "Value": "Malicious"
                    }
                ]
            }
        },
        "TestSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow incoming internet http, and ssh traffic",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "VpcId": {
                    "Ref": "TestVpc"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Test Servers"
                    },
                    {
                        "Key": "Environment",
                        "Value": "Test"
                    }
                ]
            }
        },
        "MaliciousSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow incoming http and ssh traffic",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "VpcId": {
                    "Ref": "MaliciousVpc"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Malicious Servers"
                    },
                    {
                        "Key": "Environment",
                        "Value": "Malicious"
                    }
                ]
            }
        },
        "Group": {
            "Type": "AWS::IAM::Group",
            "Properties": {
                "GroupName": "Students",
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "students-policy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:Describe*",
                                        "s3:Get*",
                                        "s3:List*",
                                        "s3:PutObject",
                                        "guardduty:List*",
                                        "guardduty:Get*",
                                        "guardduty:DeleteDetector",
                                        "guardduty:UpdateDetector",
                                        "guardduty:CreateIPSet",
                                        "guardduty:DeleteIPSet",
                                        "guardduty:UpdateIPSet",
                                        "guardduty:CreateThreatIntelSet",
                                        "guardduty:DeleteThreatIntelSet",
                                        "guardduty:UpdateThreatIntelSet",
                                        "guardduty:CreateSampleFindings"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:CreateServiceLinkedRole"
                                    ],
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:iam::",
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                ":role/aws-service-role/guardduty.amazonaws.com/AWSServiceRoleForAmazonGuardDuty"
                                            ]
                                        ]
                                    },
                                    "Condition": {
                                        "StringLike": {
                                            "iam:AWSServiceName": "guardduty.amazonaws.com"
                                        }
                                    }
                                },
                                {
                                    "Action": [
                                        "ec2:Describe*"
                                    ],
                                    "Resource": "*",
                                    "Effect": "Allow",
                                    "Condition": {
                                        "StringEquals": {
                                            "ec2:Region": "us-west-2"
                                        }
                                    }
                                },
                                {
                                    "Action": [
                                        "health:DescribeEventAggregates",
                                        "iam:ListRoles"
                                    ],
                                    "Resource": [
                                        "*"
                                    ],
                                    "Effect": "Allow"
                                },
                                {
                                    "Action": [
                                        "logs:GetLogEvents"
                                    ],
                                    "Resource": "*",
                                    "Effect": "Allow"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "User": {
            "Type": "AWS::IAM::User",
            "Properties": {
                "LoginProfile": {
                    "Password": {
                        "Fn::FindInMap": [
                            "UserConfig",
                            "Login",
                            "Pass"
                        ]
                    }
                },
                "Path": "/",
                "Groups": [
                    "Students"
                ],
                "UserName": {
                    "Fn::FindInMap": [
                        "UserConfig",
                        "Login",
                        "Name"
                    ]
                }
            }
        }
    }
}